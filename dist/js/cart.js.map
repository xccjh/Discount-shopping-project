{"version":3,"sources":["cart.js"],"names":["$","init","cartAll","eventList","on","additionAll","console","log","toggleClass","hasClass","text","token","JSON","parse","sessionStorage","getItem","ajax","url","headers","Authorization","success","result","meta","status","cart_info","data","html","template","goodsObj","mui","numbox","$lis","total","i","length","li","tmpObj","tmpPrice","goods_price","tmp_num","find","val"],"mappings":"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","sourcesContent":["$(function() {\r\n  /* \r\n  1 任何人都可以访问这个购物车页面吗   登录过后的用户 才可以访问\r\n    1 判断 本地存储中有没有  userinfo 这个数据  有 登录过\r\n      假如 没有数据 \r\n        1 把当前的页面路径存入到 本地存储中 pageurl\r\n        2 跳转到登录页面\r\n  2 发送请求渲染数据 私人的数据  token  请求头 \r\n    1 token  本地存储 复杂类型\r\n    2 对象也是可以循环\r\n\r\n  3 计算总价 \r\n    1 页面打开的时候就计算总价格\r\n    2 点击数字输入框的时候 也是需要计算总价\r\n      1 绑定点击事件\r\n      2 点击触发 再调用 刚才 计算总价的方法\r\n  4 页面状态的改变\r\n    0 想 通过给body标签添加一个class 来控制 下面的标签的显示和隐藏   $(\"body\").toggleClass(\"edit_status\");\r\n      1 当body标签 没有 class  \"edit_status\"  以下标签就隐藏\r\n      2 当body标签 有 class  “edit_status”   以下标签就显示\r\n    1 一开始 复选框。数字输入框，删除按钮 都是隐藏\r\n    2 点击 编辑按钮的时候 以上的标签 反复切换 显示 \r\n   \r\n   */\r\n  init();\r\n  function init() {\r\n    cartAll();\r\n    eventList();\r\n  }\r\n  function eventList(){\r\n    // 绑定 数字输入框的编辑按钮点击 事件  +  - \r\n    $(\".order_list\").on(\"tap\",\" li .goods_num_tool button\",function () {\r\n      // console.log(\"被点击了\");\r\n      // 调用计算总价格的方法\r\n      additionAll();\r\n      \r\n    })\r\n\r\n    // 绑定 编辑按钮 点击事件\r\n    $(\".edit_btn\").on(\"tap\",function () {\r\n      console.log(\"编辑\");\r\n\r\n      // 切换 添加 class \r\n      $(\"body\").toggleClass(\"edit_status\");\r\n\r\n      // 判断 如果 body上 有  edit_status 按钮的文本就变成 “完成”\r\n      // 否则 就是编辑\r\n      if($(\"body\").hasClass(\"edit_status\")){\r\n        $(this).text(\"完成\")\r\n      }else{\r\n        $(this).text(\"编辑\")\r\n      }\r\n      \r\n    })\r\n  }\r\n\r\n  // 获取购物车数据\r\n  function cartAll() {\r\n    // let obj={ name:\"猪八戒\", skill:\"卖队友\" };\r\n    // // es5\r\n    // // let name=obj.name;\r\n    // // let skill=obj.skill;\r\n    // // es6  解构的语法\r\n    // let {name,skill}=obj;\r\n    // console.log(name,skill);\r\n\r\n    // 2.1 获取本地存储中的token 字段\r\n    let token = JSON.parse(sessionStorage.getItem(\"userinfo\")).token;\r\n    // es6  解构 node js es 6  解构 知识点\r\n    // let {token}=JSON.parse(sessionStorage.getItem(\"userinfo\"));\r\n\r\n    // $.get 没有办法 设置请求头\r\n    $.ajax({\r\n      url: \"http://api.pyg.ak48.xyz/api/public/v1/my/cart/all\",\r\n      // type:\"get\"\r\n      // data:{}\r\n      headers: {\r\n        Authorization: token\r\n      },\r\n      success: function(result) {\r\n        // console.log(result);\r\n        if (result.meta.status == 200) {\r\n          // 以前循环的数据都是数组 但是现在 是对象\r\n          // 数组可以循环 对象可以循环\r\n          // 要传递给模板引擎的数据\r\n          let cart_info = JSON.parse(result.data.cart_info);\r\n          console.log(cart_info);\r\n          let html = template(\"mainTpl\", { goodsObj: cart_info });\r\n          $(\".order_list\").html(html);\r\n\r\n          // 数字输入框的初始化\r\n          mui(\".mui-numbox\").numbox();\r\n\r\n          // 计算总价格\r\n          additionAll();\r\n        } else {\r\n          console.log(\"失败\", result);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // 计算购物车总价格\r\n  function additionAll() {\r\n    /* \r\n    0 把每一种 商品的信息 提前放入到 li标签的自定义属性中，方便后期的获取 \r\n      修改一下 模板引擎的代码 \r\n    1 获取 所有的li标签 里面   商品信息对象\r\n    2 对li标签的商品信息对象数组 进行循环\r\n    3 在循环中\r\n      1 每一种商品的单价 * 该商品的数量(数字输入框里面的值)\r\n      2 需要叠加之后的总价格 渲染到页面的对应的标签上 \r\n     */\r\n\r\n    //  1 获取所有的li标签 $lis是一个jq对象\r\n    let $lis = $(\".order_list li\");\r\n    // console.log($lis);\r\n\r\n    // 定义总价\r\n    let total=0;\r\n    // 2 进行循环\r\n    for (let i = 0; i < $lis.length; i++) {\r\n      // 3.1 获取到每一个 li标签的dom对象  js 原生的dom对象\r\n      let li = $lis[i];\r\n      // 3.2 获取li标签身上的 商品信息对象   如何通过原生的js 获取 标签上的 data- 属性的值   dom.dataset.属性名 \r\n      // <li data-obj=\"1233\"></li >\r\n      let tmpObj = $(li).data(\"obj\");\r\n      // 获取该商品的单价\r\n      let tmpPrice=tmpObj.goods_price;\r\n      // 获取要购买的商品的数量 \r\n      let tmp_num=$(li).find(\".mui-numbox-input\").val();\r\n\r\n      total+=tmpPrice*tmp_num;\r\n    }\r\n    // 把总价格 赋值到对应的标签上\r\n    console.log(total);\r\n    $(\".total_price\").text(total);\r\n  }\r\n});\r\n"],"file":"cart.js"}