{"version":3,"sources":["goods_list.js"],"names":["$","QueryObj","query","cid","getUrl","pagenum","pagesize","TotalPage","init","mui","pullRefresh","container","down","auto","callback","cb","data","html","template","arr","endPulldownToRefresh","refresh","goodsSearch","up","console","log","endPullupToRefresh","append","func","get","result","meta","status","goods","Math","ceil","total","name","reg","RegExp","r","window","location","search","substr","match","decodeURI"],"mappings":"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","sourcesContent":["$(function() {\r\n  /* \r\n  1 获取发送到后台需要的 请求参数 \r\n  2 使用mui下拉上拉组件的步骤\r\n    1 看着文档来修改 标签结构\r\n    2 看着文档来修改 样式结构\r\n    3 js的初始化\r\n  3 什么时候发送ajax请求和什么时候 结束 下拉刷新组件\r\n    1 什么时候发送ajax请求 在mui的下拉刷新组件 启用的同时 \r\n    2 标签都生成 就可以 结束 下拉刷新组件\r\n  4 修改现在的代码结构\r\n    1 第一次打开页面的时候\r\n      1 标签 全部替换 $().html()\r\n      2 结束 下拉刷新组件\r\n    2 实现 加载下一页\r\n      1 请求了 5条数据  再请求5条  一共  10条 $().html()\r\n          追加 $().append()\r\n      2 结束  上拉加载组件\r\n    3 请求的路径还是同一个 但是 数据回来之后要做的事不一样\r\n      首次加载   全部替换 和  结束下拉\r\n      加载下一页  追加数据 和 结束上拉 \r\n  5 上拉加载下一页\r\n    1 判断有没有下一页的数据 \r\n      当前的页码（已知） 和 总页码比较   总页码=Math.ceil(总条数 / 页容量)\r\n        当前页码  大于等于 总页码  没有下一页 否则就 有下一页数据\r\n       总页码=Math.ceil(总条数 / 页容量) \r\n           ？ =  Math.ceil(21 /10)= 3\r\n    2 在什么地方开始判断 有没有下一页数据\r\n      1 在执行 上拉手势操作的时候开始判断\r\n      2 还有下一页的数据\r\n        1 当前页码 ++ \r\n        2 直接发送请求获取数据\r\n        3 请求成功 需要 \r\n          1 append\r\n          2 结束 上拉刷新组件\r\n    6 在执行完 上拉加载之后 没有下一页的数据之后  触发下拉刷新 bug 就出现\r\n      1 不断进行加载下一页的时候 页码一直 被++ 1 =>4 \r\n      2 上拉组件 已经变成 没有更多数据\r\n      3 执行 下拉刷新 用到的参数 页码已经变成了  4 \r\n        1 当用户触发下拉刷新的时候 肯定是希望 加载的是第一页的数据\r\n      4 当用户 执行 下拉刷新的同时 也顺便 重置一下 上拉组件 \r\n   */\r\n\r\n  // 1 发送请求需要的参数对象 全局变量 方便修改\r\n  let QueryObj = {\r\n    // 查询的关键字 可以为空  根据 小米  华为 。。。。\r\n    query: \"\",\r\n    // 分类页面中的每一个小商品的分类id\r\n    // 获取 url上的参数 cid的值\r\n    cid: getUrl(\"cid\"),\r\n    // 页码\r\n    pagenum: 1,\r\n    // 页容量  一页可以存放几条数据\r\n    pagesize: 10\r\n  };\r\n\r\n  // 2 总页码 是在发送请求成功了 才能 正确的赋值\r\n  let TotalPage = 1;\r\n\r\n  init();\r\n  function init() {\r\n    // 开始调用mui的下拉组件\r\n    mui.init({\r\n      pullRefresh: {\r\n        container: \".pyg_view\",\r\n        // 下拉刷新组件的配置\r\n        down: {\r\n          // 一打开页面的时候 自动显示 下拉刷新组件\r\n          auto: true,\r\n          //  触发下拉刷新时自动触发\r\n          callback: function() {\r\n            // 一旦看到下拉刷新组件 就表示 该代码也会一起被执行\r\n            let cb = function(data) {\r\n              let html = template(\"mainTpl\", { arr: data });\r\n              $(\".list\").html(html);\r\n\r\n              // 结束下拉刷新\r\n              mui(\".pyg_view\")\r\n                .pullRefresh()\r\n                .endPulldownToRefresh();\r\n\r\n                // 重置 上拉组件\r\n                mui('.pyg_view').pullRefresh().refresh(true);\r\n            };\r\n\r\n            // 重置页码 变成第一页\r\n            QueryObj.pagenum=1;\r\n            // 重置 上拉组件  思路十分正确 但是 mui框架不给力 没有效果 \r\n            // 但是 我有方法来解决 bug 把以下代码 放入到 cb的回调函数中执行就可以了\r\n            // mui('.pyg_view').pullRefresh().refresh(true);\r\n            goodsSearch(cb);\r\n          }\r\n        },\r\n        // 上拉加载下一页的配置\r\n        up: {\r\n          //  触发上拉刷新时自动触发\r\n          callback: function() {\r\n            // 判断有没有下一页的数据\r\n            if (QueryObj.pagenum >= TotalPage) {\r\n              console.log(\"没有数据 不要再划了 网页都要崩掉！\");\r\n\r\n              // 自己把没有数据的提示 放入到页面中 一旦传入了一个true 那么这么上拉组件永远不会再被执行\r\n              // 没数据了 肯定没有办法再执行 \r\n              mui(\".pyg_view\")\r\n              .pullRefresh()\r\n              .endPullupToRefresh(true);\r\n            } else {\r\n              console.log(\"还有数据 准备 下一次的请求\");\r\n              QueryObj.pagenum++;\r\n\r\n              // 定义数据回来之后的逻辑\r\n              let cb = function(data) {\r\n                let html = template(\"mainTpl\", { arr: data });\r\n                // append 追加\r\n                $(\".list\").append(html);\r\n\r\n                // 结束上拉组件\r\n                // 结束上拉加载更多 如果没有数据 传入 true 否则 传入 false\r\n                mui(\".pyg_view\")\r\n                  .pullRefresh()\r\n                  .endPullupToRefresh(false);\r\n              };\r\n\r\n              goodsSearch(cb);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // 获取商品列表数据\r\n  function goodsSearch(func) {\r\n    // $.get(\"地址\",\"？参数对象\",成功的回调函数)\r\n    $.get(\r\n      \"http://api.pyg.ak48.xyz/api/public/v1/goods/search\",\r\n      QueryObj,\r\n      function(result) {\r\n        // 判断请求成功\r\n        if (result.meta.status == 200) {\r\n          // 成功\r\n          // 模板要渲染的数据\r\n          let data = result.data.goods;\r\n\r\n          // 计算总页码\r\n          TotalPage = Math.ceil(result.data.total / QueryObj.pagesize);\r\n          console.log(TotalPage);\r\n\r\n          // 生成标签\r\n          // let html = template(\"mainTpl\", { arr: data });\r\n          // $(\".list\").html(html);\r\n\r\n          // // 结束下拉刷新\r\n          // mui(\".pyg_view\") .pullRefresh() .endPulldownToRefresh();\r\n          func(data);\r\n        } else {\r\n          console.log(\"失败\", result);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  // 获取url上的参数 的值\r\n  function getUrl(name) {\r\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\r\n    var r = window.location.search.substr(1).match(reg);\r\n    if (r != null) return decodeURI(r[2]);\r\n    return null;\r\n  }\r\n});\r\n"],"file":"goods_list.js"}